------ Java 8 --------
1. Why java 8 and its agenda :
   - Main reason to intruduce is the conciseness code(less code with same function).
   - Java brings with functional programming (lambda expression which is powerful tool to create the conciseness code)
   - java was observed that mid 20s java lost large market. 

2. Features :
   - lambda expression
   - Stream API
   - Default method
   - Static method
   - functional interface
   - DateTime API
   - Method reference
   
3. What is labda expression :
   its anonymous function (without name, without return type, without access modifier and having one lambda expression () -> Arrow token symbol)
   Lambda expression helps us to write our code in functional style
   
4 Functional interface :  Functional interfaces are also known as Single Abstract Method Interfaces 
  - are those interface which can have only one abstract method
  - it can have any number for static and default method no restrication on that.
  - some functional interface are Runnable , Comparable
  
  
5. Functional interface provide the reference to the lambda expression.
   - Comparator<String> c = (s1,s2) -> s1.compareTo(s2);

6. Can we create our own functional interface
  - yes we can . one interface with annotation as @functionalInterface and one abstract method. there is no restriction to add static and default method 
  - is will add more than one abstarct method compiler will thow complie time error.

7. Method reference is replacement of lambda expression it is used to refer the method of functional interface to an existing method.
   method reference is alternative of lambda expression.
   
8. Default Method : method is interface with implementaion this will not affect to the 
   interface which are implementing this.

9 can we overrid the default method in java.
  Yes if we are not setisfying with default implementaion.
  
10 Default keyword is the access modifier 
   : No before java 8 we were using this in switch case.

11 how we can override the default method 
   - simliar to the overding but we will not use the deafult keyword in class
   - we can reduce the visibility from public to private , protected and default.

12 can we use default implementation of hashcode method in interface 
   : no we can not use default implementaion of java.lang.object class it will thorw compile time error.
   
13 how default method in interface cop with diamod problem.
  - if two interface has same default method than its diamond problem
  - in such situation code will not compile and thow compile time error as duplicate default method.
  - how to solve : in implemented class use interfaceName.super.methodName();

14. why static method introduced in java 8
  - because u can cl interface using inteface name without its object.
  - interface never contain constructor , block. 
  - we got this flexibility in java 8  only.
  - it saves a memory no need to create class and than its implementation and all.

15 static method implementation not avaliable by default.(this is disadvantages of static method of inteface that is not avaliable to implementing class) 
   - you need to call static method explicitly.

------- Stream --------

1. -- if we want to process bulk object than we will go with stream concept.
   -- way to operate on collection in java 8 stream
   -- it is special clss that allows processing  collections object in functional manner.
   -- ex want to fetch all the values from list whose value is greater than 15.
   
2. diff btw java stream and java.io.stream 
   -- java.io.stream relaed to files data which is used to written to a file or read from a file
   -- java streams is related to collection object. if we want to perform some operation than will go with stream.
  
                                   Stream
								     |
	                   ---------------------------------
					   |                                |
			       Configuration                      Processing
				       |
		        -----------------
				|               |
			Filter             Map
    (To reduce the value)	(create the object with all th values)	
	
	
	Stream main concept is creation  --> configuration --> Processing
	we can achieve procession using following methods 
	collect, count,forEach,sorted,toArray,of,min Max
	
	collect
	of: convert any group of value into stream
	
	
	
3. Predicates
   -- predifined functional interface (having only one abstract method)
   -- whenever we want to check the boolean condition than will use the predicate
   -- one abastract method is 
      public boolean test(T t);
	  
	  Predicate<String>checkLength = s-> s.length()>5;
		System.out.println(checkLength.test("Java T point"));   //
		
   Advantages : code resuability 
                less lines of code
				conditional check is holded by functional interface
				
4 Predicate Joining
  you can combine the predicate
  three ways to join AND , OR , Negate
  
  Ex : if we want to test 2  condition string lenght as well as string lengh is even than will use predicate joining.
  
  
5 Function :
  -- fucntion is predified function interfce (having only one abstract method)
  -- method is apply(T,t)
  -- we pass the input based on that it return the out not necessarily (boolean)
  -- function return type is not fixed so we have to mention both input and return type as well
  -- avaliable in package java.util.function
  
  Function<Integer,Integer> square = i -> i*i;
  System.out.println(square.apply(10));
  
  diff btw predicate and function 
  1 predicate return boolena value
  2 it takes 1 argument
  3 abstract method is test
  
  1 function return type of object  it perform operation and return the result
  2 it return in form fo Function<T,R> need to specify the return type as well
  3 abstract method is apply
  
6 Function chaining :
  andThen and compose
  
7 Consumer Function Interface:
  it take one obejct and never return anything. it comsumes only
  method is public void accept(T t)
  it take input perform operation based on condition and never return anything.
  
  consumer Chaining : one method andThen. no compose method avaliable

8 Supplier Functional Interface
  it only supply never consume anything.
  it does not take any input only retun the output.
     public R get(); method

  -- no chaining required because no input is there. beacaue chaining is required when we have one input and required multiple output	

 # advantages :
  -- write once use anywhere
  -- code resuability 
  
9 why bisupplier not possible 
  because there is no input so bisupplier doesn't work.
  
10 there is no triPredicate, triFnction, triConsumer in java

 
localDate .now
localTIme .now 

getZone 
after before time plusMonth() and minusMonth()

11 map return single value of object but flatMap return multiple values (Stream of object).

12 Optional class is check for null
   if we are using optional than will not get null pointer exception
   
   :Java introduced a new class Optional in Java 8. It is a public final class which is used to deal with NullPointerException in Java application. We must import java.util package to use this class. It provides methods to check the presence of value for particular variable.
   
   https://javaconceptoftheday.com/solving-real-time-queries-using-java-8-features-employee-management-system/
   
13 Method Reference : is replacement of lambda expression it is used to refer the method of functional Interface to an existing method.
                     -- code resuability
					 -- dubble collon operator ::
					 -- whenever we have existing implementaion of abstarct method of functional interface than we can go for mehod reference
					 
14 Parallel Stream : it utilize to multiple core of CPU.
  -- when we use parallel stream we divide the code into multiple streams that executes parallely , on seperate cores and final result is the outcome of individual.
  
15 Difference between Intermediate and terminal operations in Stream?

Intermediate operations are lazy in nature and do not get executed immediately. Terminal operations are not lazy, they are executed as soon as encountered. Intermediate operation is memorized and is called when terminal operation is called.

All Intermediate operations return stream as it just transforms stream into another and terminal operation donâ€™t.

Example of Intermediate operations are:

filter(Predicate)
map(Function)
flatmap(Function)
sorted(Comparator)
distinct()
limit(long n)
skip(long n)


Example of terminal operations are :

forEach
toArray
reduce
collect
min
max
count
anyMatch
allMatch
noneMatch
findFirst
findAny
