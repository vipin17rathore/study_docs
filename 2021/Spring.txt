Spring

1. loose coulpling :
2. Beans in spring : @Component,
3. Annotation @Primary
  This annotation is used on a class that needs to be taken by spring on a primary basis. For instance, if ClassX is @Component annotated and is dependent on both Class1 and Class2 (both @Component annotated) then the compiler would report an error. To show the primary class between Class1 and Class2 we use @Primary.
  
4. Dependency Injection
5  IOC
6. @Component can be used in any of the layers. Whereas, the @Controller is used in the controller/web layer. @Service is used in the business layer and @Repository is used in the DAO layer.
@RequestParam = > is for parameter which is avalibale in url

==> Spring MVC Navin Tutorial
==> Sprinng boot Navin Video
==> Spring boot deployment using jar and war
==> Spring Interview Questions
==> Microservices
==> Basic Hibernate

==> Basic JSP
==> Bacis Servlet
==> Basic HTML , CSS for like interview questions
==> SQL and PLSQL
==> GIT
==> AWS
--------------------
1. Autowire by name, by type , by constructor
2. @Required :
   The @Required annotation in spring is a method-level annotation applied to the setter method of a bean property and thus making the setter-injection mandatory. This annotation indicates that the required bean property must be injected with a value at the configuration time.
   
3 @Value: to read the value from property file
4 @Component is found during classpath scanning and registered in the context as a Spring bean. @Service
5 @Configuration : for configuration class
6 @ComponentScan : to scan the base packages
7 @ Bean :@Component is a class level annotation whereas @Bean is a method level annotation and name of the method serves as the bean name. @Component need not to be used with the @Configuration annotation where as @Bean annotation has to be used within the class which is annotated with @Configuration



Controller Advice
The @ControllerAdvice is an annotation, to handle the exceptions globally.

Exception Handler
The @ExceptionHandler is an annotation used to handle the specific exceptions and sending the custom responses to the client.

Cross Cutting : a common functionality which is require in entire application called cross cutting concern

AOP annotation::
@Aspect   : class level
@EnableAspectJAutoProxy class level
@Component

method level
@Before("execution(public void draw)")
@After

wildcard means (*)
pointCut vs jointPoint 
@PointCut :

PointCut is a set of one or more JoinPoint where an advice should be executed. You can specify PointCuts using expressions or patterns as we will see in our AOP examples. In Spring, PointCut helps to use specific JoinPoints to apply the advice. Consider the following examples −

@PointCut("execution(* com.tutorialspoint.*.*(..))")

@PointCut("execution(* com.tutorialspoint.Student.getName(..))")

@Jointpoint ::
A JoinPoint represents a point in your application where you can plug-in AOP aspect. You can also say, it is the actual place in the application where an action will be taken using Spring AOP framework. Consider the following examples −

All methods classes contained in a package(s).

A particular methods of a class

scope: 
Prototype : to force spring to produce a new bean instance each time needed than the scope wil be prototype
singleton : if you want sping to return the same bean instance each time needed than the scope will be singleton
            -- singlton instance stored in cache of such singlton beans. default scope is singlton 
			
singleton – Return a single bean instance per Spring IoC container
prototype – Return a new bean instance each time when requested
request – Return a single bean instance per HTTP request. *
session – Return a single bean instance per HTTP session. *
globalSession – Return a single bean instance per global HTTP session. *


--------------
1. Types of IOC 

BeanFactory: BeanFactory is like a factory class that contains a collection of beans. It instantiates the bean whenever asked for by clients.

ApplicationContext: The ApplicationContext interface is built on top of the BeanFactory interface.
					It adds some extra functionality than BeanFactory such as simple integration with Spring's AOP, message resource handling , event propagation
					
2. What are the transaction management supports provided by spring?
Spring framework provides two type of transaction management supports:

Programmatic Transaction Management: should be used for few transaction operations.
Declarative Transaction Management: should be used for many transaction operations.

					